%==========================================================================
% Author: Gabriele Gualandi     Date: 2023     Ver: 1.6
% MÃ¤lardalens University - Course in Industrial Robotics (DVA400)
%==========================================================================
% [optional varargout] = showRobStates(robot,sequenceOfStates,sampleTime,[optional varargin])
%
% Visualizes the time evolution of a robot given a set of states
% Input:
% - a Matlab Robotic System Toolbox robot,
% - a sequence of states (a matrix) where states are columns (pre-generated by ...)
% - the known (constant) sampling time used to produce the states
%
% Inputs:
% robot: handle of a Matlab Robotics System toolbox robot
% sequenceOfStates: matrix where successive robot states are columns
% sampleTime: time interval between each state sample that produced sequenceOfStates
% [optional args]:
%       'showedFPS' (integer): desired animation frames per second. Try a
%       value of 60 for a very fluid visualization. Default: 30.
%       'handtrace' (true/false): if true, leaves the trace (set of a circles)
%       showing the path of the hand. May deteriorate the real-time
%       visualization (if you don't have a powerful CPU, use together with
%       'showedFPS',20). Default: false
%       'PreservePlot' (true/false): if true, leaves the traces of all the
%       robot image frames. Default: false
%       'COMpositions' (cell): cell of symbolic COM positions (in the joints variable) of i-th link in the
%       i-th frame. It requires also jointsVarsVar.
%       'jointsVarsVar' (array of syms): symbols used for the joints
%       variable
%
% Outputs (optional):
% - oldComsCircles: handles to the circles of COMs drawing, to let the user
% delete them
%
%
% example: showRobStates(myRob,sequenceOfStates,sampleTime,'handtrace',true,'showedFPS',20);
%
% NOTE:
% This function decouples the simulation time from the graphical time.
% The states will be decimated, or replicated, in order to attempt a
% real-time animation. If you have enough CPU power, the duration of the animation
% is the same of the simulated time, but the given 'showedFPS'.
% The animation will not be real-time if your CPU is too weak.

function [varargout] = showRobStates(robot,sequenceOfStates,sampleTime,varargin)
showedFPS = 30; % Default frames per second to draw
PreservePlot =  false; % default
handtrace = false; % default
savevideo = '';
FastUpdate = false;
drawCOMs = false;
jointsVar = [];

% user can override default values with the last optional arg
if ~isempty(varargin)
    for i = 1:2:numel(varargin)
        if strcmp(varargin{i},'PreservePlot')
            PreservePlot =  varargin{i+1};
        elseif strcmp(varargin{i},'showedFPS')
            showedFPS = varargin{i+1};
        elseif strcmp(varargin{i},'handtrace')
            handtrace = varargin{i+1};
        elseif strcmp(varargin{i},'COMpositions')
            drawCOMs = true;
            COMpositionBaseSet = varargin{i+1};
        elseif strcmp(varargin{i},'jointsVar')
            jointsVar = varargin{i+1};
            if size(jointsVar,2) >size(jointsVar,1)
                jointsVar = transpose(jointsVar);
            end
        elseif strcmp(varargin{i},'savevideo')
            savevideo = varargin{i+1}; % fileName
        else
            disp(varargin{i});
            error('Unknown option, or option value is missing.');
        end
    end
end

if ~PreservePlot % && ~handtrace
    FastUpdate = true;
end

numSimulSamples = size(sequenceOfStates,2); % Number of states to be draws
simulTime = numSimulSamples * sampleTime; % Seconds of duration of the animation
numShowSamples = round(simulTime * showedFPS); % Number of frames to show
simulShowRatio = numSimulSamples / numShowSamples; % if < 1, states has to be duplicated, if > 1, state has to be removed (decimated)

% Decimates or duplicates states, based on the simulShowRatio
sequenceOfStatesDecimated = zeros(size(sequenceOfStates,1),numShowSamples);
for i = 1:numShowSamples
    index = min(numSimulSamples,max(1,round(i * simulShowRatio)));
    sequenceOfStatesDecimated(:,i) = sequenceOfStates(:,index);
end

r = rateControl(showedFPS);
lastBodyName = robot.BodyNames{end};

%% These two lines are somehow required when you use both the the 'show' command and the plot3 command
% if handtrace
%     show(robot, robot.homeConfiguration , 'PreservePlot', false);
%     hold on
% end

if PreservePlot
    hold on
end
%%

oldComsCircles = []; % handle mantained to remove the COMs drawn (if any)

posHand = zeros(3,size(sequenceOfStatesDecimated,2)); % x,y,z over time
for k = 1:size(sequenceOfStatesDecimated,2)
    qNow = sequenceOfStatesDecimated(:,k);
    posHand(:,k) = getPositionOfHand(robot,qNow,lastBodyName);
    % Show the robot
    frame = show(robot, qNow, 'PreservePlot', PreservePlot,'FastUpdate',FastUpdate);
    if drawCOMs % draw COMs, if any
        if isempty(jointsVar)
            error('If you provide COMpositionBaseSet you also need to provide jointsVar');
        end
        nn = numel(COMpositionBaseSet);
        if k>1
            for i = 1:nn
                delete(oldComsCircles(i));
            end
        end
        for i = 1:nn
            try
                COMnow = double(subs(COMpositionBaseSet{i},jointsVar,qNow));
            catch ME
                subs(COMpositionBaseSet{i},jointsVar,qNow)
                warning('You COM positions must be numeric. instead it has sym variables, as displayed above');
                rethrow(ME);
            end
            oldComsCircles(i) = plot3(COMnow(1),COMnow(2),COMnow(3),'.r', 'MarkerSize',60); % saves handle to delete in next draw
        end
    end

    if handtrace
        line(posHand(1,1:k),posHand(2,1:k),posHand(3,1:k));
    end

    if ~strcmp(savevideo,'')
        videoframes(k) = getframe(gcf);
    end
    waitfor(r);
end

varargout{1} = oldComsCircles; % to let the user delete the circles of COMs, if any


if ~strcmp(savevideo,'')
    writerObj = VideoWriter(savevideo); % 1 FPS
    writerObj.FrameRate = showedFPS;
    % open the video writer
    open(writerObj);
    % write the frames to the video
    for i=1:length(videoframes)
        % convert the image to a frame
        writeVideo(writerObj, videoframes(i));
    end
    % close the writer object
    close(writerObj);
end


end

function Pnow = getPositionOfHand(robot,qNow,lastBodyName)
Rnow = getTransform(robot, qNow, lastBodyName);
Pnow = Rnow(1:3,4);
end
